/*
 * @file QoT.idl
 * @brief Messages for communicating QoT devices 
 * @author Andrew Symington and Sandeep D'souza
 * 
 * Copyright (c) Regents of the University of California, 2015. All rights reserved.
 * Copyright (c) Carnegie Mellon University, 2016. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 	1. Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice, 
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

module qot_msgs
{
	struct TimelineType
	{
		string uuid;		// Name of the timeline
		string name;		// Node's name
		double resolution;	// Node's requested resolution
		double accuracy;	// Node's requested accuracy
		string master;		// Node's perception of master (handovers)
		short domain;		// PTP Domain (only set by master)
	};
#pragma keylist TimelineType name
	// Msg Types
    enum MsgType {
		COORD_READY,
		COORD_START,
		SENSOR_VAL
	};

	// Uncertain Timestamp Type
	struct UncertainTimestamp {
		unsigned long long timestamp;     // Message Timestamp in ns
    	unsigned long long uncertainty_u; // Uncertainty on Upper Bound in ns
    	unsigned long long uncertainty_l; // Uncertainty on Lower Bound in ns
	};

    struct TimelineMsgingType
    {
    	string uuid;        			  // Name of the Timeline
    	string name;        			  // Node's name
    	MsgType type;       			  // Type of the message
    	UncertainTimestamp utimestamp;    // Timestamp associated with message
    	string data;                      // Message Data
    };
#pragma keylist TimelineMsgingType name

	struct NameService {
        long     userID;           // unique user identification
        string name;               // name of the node
    };
#pragma keylist NameService name

};
