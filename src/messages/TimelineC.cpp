// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "TimelineC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "TimelineC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Timeline[] =
      {
        { "uuid", &CORBA::_tc_string },
        { "resolution", &CORBA::_tc_double },
        { "accuracy", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Timeline (
  ::CORBA::tk_struct,
  "IDL:Timeline:1.0",
  "Timeline",
  _tao_fields_Timeline,
  3);

::CORBA::TypeCode_ptr const _tc_Timeline =
  &_tao_tc_Timeline;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
Timeline::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Timeline *_tao_tmp_pointer =
    static_cast<Timeline *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Timeline &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Timeline *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Timeline>::insert_copy (
      _tao_any,
      Timeline::_tao_any_destructor,
      _tc_Timeline,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Timeline *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Timeline>::insert (
    _tao_any,
    Timeline::_tao_any_destructor,
    _tc_Timeline,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  Timeline *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Timeline *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Timeline *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Timeline>::extract (
      _tao_any,
      Timeline::_tao_any_destructor,
      _tc_Timeline,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Timeline &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.uuid.in ()) &&
    (strm << _tao_aggregate.resolution) &&
    (strm << _tao_aggregate.accuracy);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Timeline &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.uuid.out ()) &&
    (strm >> _tao_aggregate.resolution) &&
    (strm >> _tao_aggregate.accuracy);
}

TAO_END_VERSIONED_NAMESPACE_DECL



